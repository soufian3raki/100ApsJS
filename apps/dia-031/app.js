// Chat Offline con Bots - DÃ­a 31
class ChatBot {
  constructor() {
    this.messages = JSON.parse(localStorage.getItem("chatMessages")) || [];
    this.currentBot = "assistant";
    this.initializeElements();
    this.setupEventListeners();
    this.loadMessages();
  }

  initializeElements() {
    this.chatMessages = document.getElementById("chatMessages");
    this.messageInput = document.getElementById("messageInput");
    this.sendBtn = document.getElementById("sendBtn");
    this.botSelect = document.getElementById("botSelect");
    this.clearBtn = document.getElementById("clearBtn");
    this.exportBtn = document.getElementById("exportBtn");
  }

  setupEventListeners() {
    this.sendBtn.addEventListener("click", () => this.sendMessage());
    this.messageInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") this.sendMessage();
    });
    this.botSelect.addEventListener("change", (e) => {
      this.currentBot = e.target.value;
    });
    this.clearBtn.addEventListener("click", () => this.clearChat());
    this.exportBtn.addEventListener("click", () => this.exportChat());
  }

  sendMessage() {
    const message = this.messageInput.value.trim();
    if (!message) return;

    // Agregar mensaje del usuario
    this.addMessage(message, "user");
    this.messageInput.value = "";

    // Simular respuesta del bot
    setTimeout(() => {
      this.showTypingIndicator();
      setTimeout(() => {
        this.hideTypingIndicator();
        const botResponse = this.getBotResponse(message);
        this.addMessage(botResponse, "bot");
      }, 1500);
    }, 500);
  }

  addMessage(text, sender) {
    const message = {
      id: Date.now(),
      text: text,
      sender: sender,
      bot: this.currentBot,
      timestamp: new Date().toISOString()
    };

    this.messages.push(message);
    this.saveMessages();
    this.renderMessage(message);
  }

  renderMessage(message) {
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${message.sender}-message`;
    
    const avatar = message.sender === "user" ? "ğŸ‘¤" : "ğŸ¤–";
    const time = new Date(message.timestamp).toLocaleTimeString();
    
    messageDiv.innerHTML = `
      <div class="message-avatar">${avatar}</div>
      <div class="message-content">
        <div class="message-text">${message.text}</div>
        <div class="message-time">${time}</div>
      </div>
    `;
    
    this.chatMessages.appendChild(messageDiv);
    this.scrollToBottom();
  }

  getBotResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    switch (this.currentBot) {
      case "assistant":
        return this.getAssistantResponse(lowerMessage);
      case "weather":
        return this.getWeatherResponse(lowerMessage);
      case "joke":
        return this.getJokeResponse(lowerMessage);
      case "math":
        return this.getMathResponse(lowerMessage);
      case "quote":
        return this.getQuoteResponse(lowerMessage);
      default:
        return "Lo siento, no entiendo tu mensaje.";
    }
  }

  getAssistantResponse(message) {
    if (message.includes("hola") || message.includes("hi")) {
      return "Â¡Hola! Â¿En quÃ© puedo ayudarte hoy?";
    } else if (message.includes("ayuda") || message.includes("help")) {
      return "Puedo ayudarte con informaciÃ³n general, chistes, matemÃ¡ticas, frases motivadoras y mÃ¡s. Â¿QuÃ© te interesa?";
    } else if (message.includes("gracias") || message.includes("thanks")) {
      return "Â¡De nada! Estoy aquÃ­ para ayudarte.";
    } else if (message.includes("adios") || message.includes("bye")) {
      return "Â¡Hasta luego! Fue un placer charlar contigo.";
    } else {
      return "Interesante. Â¿PodrÃ­as contarme mÃ¡s sobre eso?";
    }
  }

  getWeatherResponse(message) {
    const weatherResponses = [
      "Hoy estÃ¡ soleado con 25Â°C. Â¡Perfecto para salir!",
      "EstÃ¡ nublado y fresco, 18Â°C. Ideal para quedarse en casa.",
      "Â¡Lluvia! 15Â°C. No olvides el paraguas.",
      "DÃ­a ventoso con 20Â°C. Cuidado con el viento.",
      "Temperatura agradable de 22Â°C. Â¡Disfruta el dÃ­a!"
    ];
    return weatherResponses[Math.floor(Math.random() * weatherResponses.length)];
  }

  getJokeResponse(message) {
    const jokes = [
      "Â¿Por quÃ© los pÃ¡jaros vuelan hacia el sur en invierno? Â¡Porque es muy lejos caminando!",
      "Â¿QuÃ© le dice un semÃ¡foro a otro? No me mires, me estoy cambiando.",
      "Â¿Por quÃ© los peces no pueden usar Facebook? Porque se olvidan la contraseÃ±a del agua.",
      "Â¿QuÃ© hace un perro con un taladro? Taladrando.",
      "Â¿Por quÃ© los elefantes no pueden usar computadoras? Porque el mouse es muy pequeÃ±o para sus patas."
    ];
    return jokes[Math.floor(Math.random() * jokes.length)];
  }

  getMathResponse(message) {
    if (message.includes("suma") || message.includes("+")) {
      const a = Math.floor(Math.random() * 100);
      const b = Math.floor(Math.random() * 100);
      return `La suma de ${a} + ${b} = ${a + b}`;
    } else if (message.includes("multiplica") || message.includes("*")) {
      const a = Math.floor(Math.random() * 20);
      const b = Math.floor(Math.random() * 20);
      return `La multiplicaciÃ³n de ${a} Ã— ${b} = ${a * b}`;
    } else if (message.includes("raÃ­z") || message.includes("sqrt")) {
      const num = Math.floor(Math.random() * 100) + 1;
      return `La raÃ­z cuadrada de ${num} es ${Math.sqrt(num).toFixed(2)}`;
    } else {
      return "Puedo ayudarte con sumas, multiplicaciones y raÃ­ces cuadradas. Â¿QuÃ© operaciÃ³n necesitas?";
    }
  }

  getQuoteResponse(message) {
    const quotes = [
      "La vida es lo que pasa mientras estÃ¡s ocupado haciendo otros planes. - John Lennon",
      "El futuro pertenece a quienes creen en la belleza de sus sueÃ±os. - Eleanor Roosevelt",
      "No hay nada imposible, la palabra misma dice 
soy
posible. - Audrey Hepburn",
      "La Ãºnica forma de hacer un gran trabajo es amar lo que haces. - Steve Jobs",
      "El Ã©xito es la suma de pequeÃ±os esfuerzos repetidos dÃ­a tras dÃ­a. - Robert Collier"
    ];
    return quotes[Math.floor(Math.random() * quotes.length)];
  }

  showTypingIndicator() {
    const typingDiv = document.createElement("div");
    typingDiv.className = "typing-indicator";
    typingDiv.id = "typingIndicator";
    typingDiv.innerHTML = `
      <div class="message-avatar">ğŸ¤–</div>
      <div class="typing-dots">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    `;
    this.chatMessages.appendChild(typingDiv);
    this.scrollToBottom();
  }

  hideTypingIndicator() {
    const typingIndicator = document.getElementById("typingIndicator");
    if (typingIndicator) {
      typingIndicator.remove();
    }
  }

  scrollToBottom() {
    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
  }

  loadMessages() {
    this.chatMessages.innerHTML = "";
    this.messages.forEach(message => this.renderMessage(message));
  }

  clearChat() {
    if (confirm("Â¿EstÃ¡s seguro de que quieres limpiar el chat?")) {
      this.messages = [];
      this.saveMessages();
      this.chatMessages.innerHTML = `
        <div class="message bot-message">
          <div class="message-avatar">ğŸ¤–</div>
          <div class="message-content">
            <div class="message-text">Â¡Hola! Soy tu asistente virtual. Â¿En quÃ© puedo ayudarte?</div>
            <div class="message-time">Ahora</div>
          </div>
        </div>
      `;
    }
  }

  exportChat() {
    const chatText = this.messages.map(msg => 
      `${msg.sender === "user" ? "Usuario" : "Bot"}: ${msg.text}`
    ).join("\n");
    
    const blob = new Blob([chatText], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "chat-export.txt";
    a.click();
    URL.revokeObjectURL(url);
  }

  saveMessages() {
    localStorage.setItem("chatMessages", JSON.stringify(this.messages));
  }
}

// Inicializar chat
let chatBot;

document.addEventListener("DOMContentLoaded", () => {
  chatBot = new ChatBot();
});
